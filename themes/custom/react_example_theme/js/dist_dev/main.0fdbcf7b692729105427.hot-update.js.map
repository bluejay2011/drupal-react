{"version":3,"sources":["webpack:///./js/src/components/DrupalProjectStats.jsx"],"names":["DrupalProjectStats","projectName","useState","project","setProject","usage","setUsage","useEffect","data","fetch","then","response","json","result","list","project_usage","error","console","log","Object","keys","map","key","propTypes","PropTypes","string","required","defaultProps","StatsItem","count","version","number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAEA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,OAAqB;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,kBAChBC,sDAAQ,CAACD,WAAD,CADQ;AAAA;AAAA,MACvCE,OADuC;AAAA,MAC9BC,UAD8B;;AAAA,mBAEpBF,sDAAQ,CAAC,IAAD,CAFY;AAAA;AAAA,MAEvCG,KAFuC;AAAA,MAEhCC,QAFgC;;AAI9CC,yDAAS,CAAC,YAAM;AACdD,YAAQ,CAAC,KAAD,CAAR;AACA,QAAME,IAAI,GAAGC,KAAK,8EACsDN,OADtD,EAAL,CAGVO,IAHU,CAGL,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KAHH,EAIVF,IAJU,CAIL,UAAAG,MAAM,EAAI;AACd,UAAIA,MAAM,CAACC,IAAP,CAAY,CAAZ,EAAeC,aAAnB,EAAkC;AAChCT,gBAAQ,CAACO,MAAM,CAACC,IAAP,CAAY,CAAZ,EAAeC,aAAhB,CAAR;AACD;AACF,KARU,WASJ,UAAAC,KAAK;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,CAAJ;AAAA,KATD,CAAb;AAUD,GAZQ,EAYN,CAACb,OAAD,CAZM,CAAT;AAcA,sBACE,qFACE,0GAEE,sEAFF,eAGE;AAAQ,WAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,QAAD,CAAhB;AAAA;AAAjB,mBAHF,eAIE;AAAQ,WAAO,EAAE;AAAA,aAAMA,UAAU,CAAC,SAAD,CAAhB;AAAA;AAAjB,eAJF,CADF,eAOE,sEAPF,eAQE;AAAK,aAAS,EAAC;AAAf,sCACkB,2EAASD,OAAT,CADlB,iCAEGE,KAAK,gBACJ,uEACGc,MAAM,CAACC,IAAP,CAAYf,KAAZ,EAAmBgB,GAAnB,CAAuB,UAAAC,GAAG;AAAA,wBACzB,2DAAC,SAAD;AAAW,WAAK,EAAEjB,KAAK,CAACiB,GAAD,CAAvB;AAA8B,aAAO,EAAEA,GAAvC;AAA4C,SAAG,EAAEA;AAAjD,MADyB;AAAA,GAA1B,CADH,CADI,gBAOJ,0FATJ,CARF,CADF;AAuBD,CAzCD,C,CA2CA;AACA;AACA;;;cA7CMtB,kB;;AA8CNA,kBAAkB,CAACuB,SAAnB,GAA+B;AAC7BtB,aAAW,EAAEuB,iDAAS,CAACC,MAAV,CAAiBC;AADD,CAA/B,C,CAIA;;AACA1B,kBAAkB,CAAC2B,YAAnB,GAAkC;AAChC1B,aAAW,EAAE;AADmB,CAAlC;AAIA;;;;;;AAKA,IAAM2B,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,MAAUC,OAAV,SAAUA,OAAV;AAAA,sBAChB,oFACE,2EAASA,OAAT,CADF,QAC+BD,KAD/B,CADgB;AAAA,CAAlB;;AAMAD,SAAS,CAACL,SAAV,GAAsB;AACpBM,OAAK,EAAEL,iDAAS,CAACO,MADG;AAEpBD,SAAO,EAAEN,iDAAS,CAACC;AAFC,CAAtB;eAKezB,kB;AAAA;;;;;;;;;;0BAvETA,kB;0BA4DA4B,S","file":"main.0fdbcf7b692729105427.hot-update.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst DrupalProjectStats = ({ projectName }) => {\n  const [project, setProject] = useState(projectName);\n  const [usage, setUsage] = useState(null);\n\n  useEffect(() => {\n    setUsage(false);\n    const data = fetch(\n      `https://www.drupal.org/api-d7/node.json?field_project_machine_name=${project}`\n    )\n      .then(response => response.json())\n      .then(result => {\n        if (result.list[0].project_usage) {\n          setUsage(result.list[0].project_usage);\n        }\n      })\n      .catch(error => console.log(\"error\", error));\n  }, [project]);\n\n  return (\n    <div>\n      <div>\n        Choose a project:\n        <br/>\n        <button onClick={() => setProject('drupal')}>Drupal core</button>\n        <button onClick={() => setProject('marquee')}>Marquee</button>\n      </div>\n      <hr />\n      <div className=\"project--name\">\n        Usage stats for <strong>{project}</strong> by version (test message):\n        {usage ? (\n          <ul>\n            {Object.keys(usage).map(key => (\n              <StatsItem count={usage[key]} version={key} key={key} />\n            ))}\n          </ul>\n        ) : (\n          <p>fetching data ...</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Provide type checking for props. Think of this as documentation for what\n// props a component accepts.\n// https://reactjs.org/docs/typechecking-with-proptypes.html\nDrupalProjectStats.propTypes = {\n  projectName: PropTypes.string.required\n};\n\n// Set a default value for any required props.\nDrupalProjectStats.defaultProps = {\n  projectName: 'drupal',\n};\n\n/**\n * Another component: this one displays usage statistics for a specific version\n * of Drupal. It's not exported, so it can only be used in this file's scope.\n * Breaking things up like this can help make your code easier to maintain.\n */\nconst StatsItem = ({ count, version }) => (\n  <li>\n    <strong>{version}</strong>: {count}\n  </li>\n);\n\nStatsItem.propTypes = {\n  count: PropTypes.number,\n  version: PropTypes.string,\n};\n\nexport default DrupalProjectStats;\n"],"sourceRoot":""}